// Generated by view binder compiler. Do not edit!
package recreate.india.main.startupcarvaan.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.WebView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import recreate.india.main.startupcarvaan.R;

public final class ActivityPrivacyPolicyBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final ImageView im11;

  @NonNull
  public final ImageView im22;

  @NonNull
  public final ImageView im33;

  @NonNull
  public final ImageView im44;

  @NonNull
  public final LinearLayout newly;

  @NonNull
  public final LinearLayout privacy;

  @NonNull
  public final WebView privacypolicy;

  @NonNull
  public final LinearLayout refund;

  @NonNull
  public final LinearLayout refundtext;

  @NonNull
  public final LinearLayout rule;

  @NonNull
  public final LinearLayout ruletext;

  @NonNull
  public final LinearLayout terms;

  @NonNull
  public final WebView termsandcondition;

  private ActivityPrivacyPolicyBinding(@NonNull ScrollView rootView, @NonNull ImageView im11,
      @NonNull ImageView im22, @NonNull ImageView im33, @NonNull ImageView im44,
      @NonNull LinearLayout newly, @NonNull LinearLayout privacy, @NonNull WebView privacypolicy,
      @NonNull LinearLayout refund, @NonNull LinearLayout refundtext, @NonNull LinearLayout rule,
      @NonNull LinearLayout ruletext, @NonNull LinearLayout terms,
      @NonNull WebView termsandcondition) {
    this.rootView = rootView;
    this.im11 = im11;
    this.im22 = im22;
    this.im33 = im33;
    this.im44 = im44;
    this.newly = newly;
    this.privacy = privacy;
    this.privacypolicy = privacypolicy;
    this.refund = refund;
    this.refundtext = refundtext;
    this.rule = rule;
    this.ruletext = ruletext;
    this.terms = terms;
    this.termsandcondition = termsandcondition;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPrivacyPolicyBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPrivacyPolicyBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_privacy_policy, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPrivacyPolicyBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.im11;
      ImageView im11 = rootView.findViewById(id);
      if (im11 == null) {
        break missingId;
      }

      id = R.id.im22;
      ImageView im22 = rootView.findViewById(id);
      if (im22 == null) {
        break missingId;
      }

      id = R.id.im33;
      ImageView im33 = rootView.findViewById(id);
      if (im33 == null) {
        break missingId;
      }

      id = R.id.im44;
      ImageView im44 = rootView.findViewById(id);
      if (im44 == null) {
        break missingId;
      }

      id = R.id.newly;
      LinearLayout newly = rootView.findViewById(id);
      if (newly == null) {
        break missingId;
      }

      id = R.id.privacy;
      LinearLayout privacy = rootView.findViewById(id);
      if (privacy == null) {
        break missingId;
      }

      id = R.id.privacypolicy;
      WebView privacypolicy = rootView.findViewById(id);
      if (privacypolicy == null) {
        break missingId;
      }

      id = R.id.refund;
      LinearLayout refund = rootView.findViewById(id);
      if (refund == null) {
        break missingId;
      }

      id = R.id.refundtext;
      LinearLayout refundtext = rootView.findViewById(id);
      if (refundtext == null) {
        break missingId;
      }

      id = R.id.rule;
      LinearLayout rule = rootView.findViewById(id);
      if (rule == null) {
        break missingId;
      }

      id = R.id.ruletext;
      LinearLayout ruletext = rootView.findViewById(id);
      if (ruletext == null) {
        break missingId;
      }

      id = R.id.terms;
      LinearLayout terms = rootView.findViewById(id);
      if (terms == null) {
        break missingId;
      }

      id = R.id.termsandcondition;
      WebView termsandcondition = rootView.findViewById(id);
      if (termsandcondition == null) {
        break missingId;
      }

      return new ActivityPrivacyPolicyBinding((ScrollView) rootView, im11, im22, im33, im44, newly,
          privacy, privacypolicy, refund, refundtext, rule, ruletext, terms, termsandcondition);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
