// Generated by view binder compiler. Do not edit!
package recreate.india.main.startupcarvaan.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.github.mikephil.charting.charts.LineChart;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import recreate.india.main.startupcarvaan.R;

public final class ActivityRciExchangeBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout Price;

  @NonNull
  public final TextView descAboutRci;

  @NonNull
  public final TextView headingAboutRci;

  @NonNull
  public final LineChart lineChartRci;

  @NonNull
  public final TextView priceOfRCI;

  private ActivityRciExchangeBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout Price,
      @NonNull TextView descAboutRci, @NonNull TextView headingAboutRci,
      @NonNull LineChart lineChartRci, @NonNull TextView priceOfRCI) {
    this.rootView = rootView;
    this.Price = Price;
    this.descAboutRci = descAboutRci;
    this.headingAboutRci = headingAboutRci;
    this.lineChartRci = lineChartRci;
    this.priceOfRCI = priceOfRCI;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRciExchangeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRciExchangeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_rci_exchange, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRciExchangeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Price;
      LinearLayout Price = rootView.findViewById(id);
      if (Price == null) {
        break missingId;
      }

      id = R.id.desc_aboutRci;
      TextView descAboutRci = rootView.findViewById(id);
      if (descAboutRci == null) {
        break missingId;
      }

      id = R.id.heading_about_rci;
      TextView headingAboutRci = rootView.findViewById(id);
      if (headingAboutRci == null) {
        break missingId;
      }

      id = R.id.lineChart_rci;
      LineChart lineChartRci = rootView.findViewById(id);
      if (lineChartRci == null) {
        break missingId;
      }

      id = R.id.price_of_RCI;
      TextView priceOfRCI = rootView.findViewById(id);
      if (priceOfRCI == null) {
        break missingId;
      }

      return new ActivityRciExchangeBinding((RelativeLayout) rootView, Price, descAboutRci,
          headingAboutRci, lineChartRci, priceOfRCI);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
